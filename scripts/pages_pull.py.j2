#!/usr/bin/env python3
import subprocess
import os
from executioner import execute

"""
Pages Pull Script

This script pulls chnages to all repos in the 
pages.charlesreid1.XYZ folder structure 

This clones the page for a given project to

/www/pages.charlesreid1.XYZ/htdocs/project-name

(where project = repo)
"""

SERVER_NAME_DEFAULT = '{{ server_name_default }}'
USERNAME = '{{ username }}'



# Repos must have a gh-pages branch
repo_names = '''bots/b-apollo
bots/b-captain-hook
bots/b-ginsberg
bots/b-milton
bots/uncle-archie
bots/boring-mind-machine
docker/d-gitea
docker/d-mediawiki
docker/d-mysql
docker/d-nginx-charlesreid1
docker/d-nginx-subdomains
docker/d-phpmyadmin
docker/d-python-files
docker/d-python-helium
charlesreid1/dont-sudo-pip
bots/embarcadero-mind-machine
charlesreid1/git-commit-ectomy
charlesreid1/git-subway-maps
charlesreid1/github-heroku-attack-rabbits
charlesreid1/how-do-i-heroku
charlesreid1/how-do-i-pandoc
charlesreid1/how-do-i-pelican
charlesreid1/how-do-i-pyenv
charlesreid1/how-do-i-snakemake
docker/pod-bots
docker/pod-charlesreid1
docker/pod-webhooks
bots/russian-rainbow-mind-machine
charlesreid1/scurvy-knave-theme
charlesreid1/translate-yer-docs
charlesreid1/wisko-manual'''.split('\n')

repo_urls = ['https://git.charlesreid1.com/%s.git'%(j) for j in repo_names]

root = '/www'
pages = 'pages.%s'%(SERVER_NAME_DEFAULT)
basedir = os.path.join(root,pages)
htdocsdir = os.path.join(basedir,"htdocs")

if not os.path.exists(basedir):
    raise Exception("Error: base directory %s does not exist!"%(basedir))

if not os.path.exists(htdocsdir):
    raise Exception("Error: htdocs directory %s does not exist!"%(htdocsdir))

for name,url in zip(repo_names,repo_urls):
    
    # for a hypothetical repo "project":
    # 
    # base dir:     /www/pages.charlesreid1.com
    # .git dir:     /www/pages.charlesreid1.com/git.project
    # htdocs dir:   /www/pages.charlesreid1.com/htdocs/project
    
    # Step 1: pull
    # Construct the git pull command to update
    # the live htdocs directory for this project

    repo_owner, repo_name = name.split("/")

    workdir = os.path.join(basedir,"htdocs",repo_name)
    dotgitdir = os.path.join(basedir,"git.%s"%(repo_name))

    if not os.path.exists(workdir):
        print("Git repository has not yet been cloned, %s does not exist on disk!"%(workdir))

    else:

        pullcmd = ['git',
                   '-C', basedir,
                   '--git-dir=%s'%(dotgitdir),
                   '--work-tree=%s'%(htdocsdir),
                   'pull','origin','gh-pages']

        print("About to pull gh-pages branch for %s using command:\n"%(name))
        print("    $ " + " ".join(pullcmd))
        print("\n")

        try:
            for loo in execute(pullcmd):
                print("\t> "+loo, end="")
            print("\n")
            print("Done.")

        except subprocess.CalledProcessError:
            print("Failed on pull command for project %s"%(name))
            print("Continuing...")



# Step 2: chown everybody
# Construct chown command
chowncmd = ['chown','-R',
            USERNAME+":"+USERNAME,
            basedir]

print("About to change owner of %s using command:\n"%(basedir))
print("    $ " + " ".join(chowncmd))
print("\n")

for loo in execute(chowncmd):
    print("\t> "+loo, end="")
print("\n")

print("Done.")

