#!/usr/bin/env python3
import subprocess
import os
from executioner import execute

"""
Pages Initial Setup

This script sets up the initial pages.charlesreid1.XYZ
folder structure and checks out all pages that should
be present initially at pages.charlesreid1.XYZ.

This clones the page for a given project to

/www/pages.charlesreid1.XYZ/htdocs/project-name

(where project = repo)
"""

SERVER_NAME_DEFAULT = '{{ server_name_default }}'
USERNAME = '{{ username }}'



# Repos must have a gh-pages branch
repo_names = '''bots/b-apollo
bots/b-captain-hook
bots/b-ginsberg
bots/b-milton
bots/boring-mind-machine
docker/d-gitea
docker/d-mediawiki
docker/d-mysql
docker/d-nginx-charlesreid1
docker/d-nginx-subdomains
docker/d-phpmyadmin
docker/d-python-files
docker/d-python-helium
charlesreid1/dont-sudo-pip
bots/embarcadero-mind-machine
charlesreid1/git-commit-ectomy
charlesreid1/git-subway-maps
charlesreid1/github-heroku-attack-rabbits
charlesreid1/how-do-i-heroku
charlesreid1/how-do-i-pandoc
charlesreid1/how-do-i-pelican
charlesreid1/how-do-i-pyenv
charlesreid1/how-do-i-snakemake
docker/pod-bots
docker/pod-charlesreid1
docker/pod-webhooks
bots/rainbow-mind-machine
bots/russian-rainbow-mind-machine
charlesreid1/scurvy-knave-theme
charlesreid1/translate-yer-docs
charlesreid1/uncle-archie
charlesreid1/wisko-manual'''.split('\n')

repo_urls = ['https://git.charlesreid1.com/%s.git'%(j) for j in repo_names]

root = '/www'
pages = 'pages.%s'%(SERVER_NAME_DEFAULT)
basedir = os.path.join(root,pages)

if not os.path.exists(basedir):
    raise Exception("Error: base directory %s does not exist!"%(basedir))

for name,url in zip(repo_names,repo_urls):
    
    # for a hypothetical repo "project":
    # 
    # base dir:     /www/pages.charlesreid1.com
    # .git dir:     /www/pages.charlesreid1.com/git.project
    # htdocs dir:   /www/pages.charlesreid1.com/htdocs/project
    
    # Step 1: clone
    # Construct the clone command to set up
    # live htdocs directory for this project

    repo_owner, repo_name = name.split("/")

    clonepth = os.path.join(basedir,"htdocs",repo_name)
    dotgitpth = os.path.join(basedir,"git.%s"%(repo_name))

    if os.path.exists(clonepth):
        print("Git repository has already been cloned, %s already exists on disk!"%(clonepth))
    
    else:

        clonecmd = ["git","clone",
                    "--separate-git-dir=%s"%(dotgitpth),
                    "-b","gh-pages",
                    url,clonepth]
    
        print("About to clone gh-pages branch for %s using command:\n"%(name))
        print("    $ " + " ".join(clonecmd))
        print("\n")
    
        for loo in execute(clonecmd):
            print("\t> "+loo, end="")
        print("\n")

        print("Done.")



# Step 2: chown everybody
# Construct chown command
chowncmd = ['chown','-R',
            USERNAME+":"+USERNAME,
            basedir]

print("About to change owner of %s using command:\n"%(pth))
print("    $ " + " ".join(chowncmd))
print("\n")

for loo in execute(chowncmd):
    print("\t> "+loo, end="")
print("\n")

print("Done.")


