{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pod-webhooks \u00b6 This docker pod runs two services: Captain Hook webhook server (python + flask) b-captain-hook Static content server for subdomain pages (nginx) d-nginx-subdomains These two services are in this repo as submodules. Links \u00b6 See documentation page here: https://pages.charlesreid1.com/pod-webhooks Source code on git.charlesreid1.com: https://git.charlesreid1.com/docker/pod-webhooks Source code on github.com: https://github.com/charlesreid1-docker/pod-webhooks Adding Hooks \u00b6 Since this is probably the only thing you'll care about once everything is actually running... until it breaks. How To Add A Hook How It Works \u00b6 See Running.md for info about running this docker pod. Running the Docker Pod from Comand Line Workflow for Docker Pod Updates See Services.md for info about running startup services. Running the Docker Pod as a Startup Service Running Captain Hook's Canary (Script) Enable/disable service (installs/uninstalls, but does not start): sudo systemctl (enable|disable) dockerpod-webhooks.service sudo systemctl (enable|disable) captain-hook-canary.service Start/stop: sudo systemctl (start|stop) dockerpod-webhooks.service sudo systemctl (start|stop) captain-hook-canary.service See Captain Hook's Canary (Canary.md) for details on the canary script that allows the webhooks docker pod to trigger itself to be re-loaded when there are new hooks added to captain hook. Volumes and Files \u00b6 Subdomains \u00b6 The static files hosted on charlesreid1.com subdomains are contained in subdirectories of /www/*.charlesreid1.com/ and this is mounted by the subdomains docker container that has rules set up for which subdomains to serve. Captain Hook \u00b6 Captain Hook mounts the /www folder, which is served by the subdomains nginx server, as well as the hooks folder in the Captain Hook repository (that's at b-captain-hook/hooks ). When there is a change pushed to a particular branch on git.charlesreid1.com, the git.charlesreid1.com server will check if there is a corresponding hook that's been added to Captain Hook for that repo and branch. If so, git.charlesreid1.com runs that script. For pages.charlesreid1.com, that's usually just a git pull on the contents of /www/pages.charlesreid1.com/my-page . Captain Hook's Canary \u00b6 Captain Hook presents a bit of a paradox: the webhook docker pod needs to be able to tell the host to restart the webhook docker pod when changes are pushed to Captain Hook itself. This is done by Captain Hook's Canary. This is a script that checks every 10 seconds for a trigger file in a directory mounted between the host and container. If the trigger file is present, the host will update its copy of Captain Hook, then restart the webhooks-subdomains docker pod. As per the blackbeard_scripts directory of dotfiles/debian , the captain_hook_canary.sh canary will restart the webhooks docker pod if it detects the file: /tmp/triggers/push-b-captain-hook-master (The canary script will clean up this file.) Now a hook can be added to Captain Hook that will be run when there is a push event on the master branch of bots/b-captain-hook . By creating a hook named push-b-captain-hook-master in the hooks/ directory of captain hook that runs a simple touch command, this webhook can trigger the script which triggers a restart of the docker pod. Code: https://git.charlesreid1.com/bots/b-captain-hook/src/branch/master/hooks/push-b-captain-hook-master Network \u00b6 The d-subodomains-nginx container opens different ports for different subdomains, and reverse-proxies requests from charlesreid1.com. The port numbering starts at 7777 for pages.charlesreid1.com and goes up from there, one port per subdomain. Also see pod-charlesreid1 on git.charlesreid1.com for the nginx reverse proxy configuration. Captain Hook runs a Flask server on port 5000 and listens for triggers from git.charlesreid1.com (gitea) web hooks. These web hooks must have the correct secret or the trigger will be ignored. Servers \u00b6 This pod runs on blackbeard. The nginx service is reverse-proxied HTTP with krash, and accessible at ports 7777+ and up. The Captain Hook webhook server is also reverse-proxied HTTP. The krash nginx server will handle all traffic to https://hooks.charlesreid1.com except URLs prefixed with webhook , which are forwarded on to Captain Hook on port 5000.","title":"Home"},{"location":"#pod-webhooks","text":"This docker pod runs two services: Captain Hook webhook server (python + flask) b-captain-hook Static content server for subdomain pages (nginx) d-nginx-subdomains These two services are in this repo as submodules.","title":"pod-webhooks"},{"location":"#links","text":"See documentation page here: https://pages.charlesreid1.com/pod-webhooks Source code on git.charlesreid1.com: https://git.charlesreid1.com/docker/pod-webhooks Source code on github.com: https://github.com/charlesreid1-docker/pod-webhooks","title":"Links"},{"location":"#adding-hooks","text":"Since this is probably the only thing you'll care about once everything is actually running... until it breaks. How To Add A Hook","title":"Adding Hooks"},{"location":"#how-it-works","text":"See Running.md for info about running this docker pod. Running the Docker Pod from Comand Line Workflow for Docker Pod Updates See Services.md for info about running startup services. Running the Docker Pod as a Startup Service Running Captain Hook's Canary (Script) Enable/disable service (installs/uninstalls, but does not start): sudo systemctl (enable|disable) dockerpod-webhooks.service sudo systemctl (enable|disable) captain-hook-canary.service Start/stop: sudo systemctl (start|stop) dockerpod-webhooks.service sudo systemctl (start|stop) captain-hook-canary.service See Captain Hook's Canary (Canary.md) for details on the canary script that allows the webhooks docker pod to trigger itself to be re-loaded when there are new hooks added to captain hook.","title":"How It Works"},{"location":"#volumes-and-files","text":"","title":"Volumes and Files"},{"location":"#subdomains","text":"The static files hosted on charlesreid1.com subdomains are contained in subdirectories of /www/*.charlesreid1.com/ and this is mounted by the subdomains docker container that has rules set up for which subdomains to serve.","title":"Subdomains"},{"location":"#captain-hook","text":"Captain Hook mounts the /www folder, which is served by the subdomains nginx server, as well as the hooks folder in the Captain Hook repository (that's at b-captain-hook/hooks ). When there is a change pushed to a particular branch on git.charlesreid1.com, the git.charlesreid1.com server will check if there is a corresponding hook that's been added to Captain Hook for that repo and branch. If so, git.charlesreid1.com runs that script. For pages.charlesreid1.com, that's usually just a git pull on the contents of /www/pages.charlesreid1.com/my-page .","title":"Captain Hook"},{"location":"#captain-hooks-canary","text":"Captain Hook presents a bit of a paradox: the webhook docker pod needs to be able to tell the host to restart the webhook docker pod when changes are pushed to Captain Hook itself. This is done by Captain Hook's Canary. This is a script that checks every 10 seconds for a trigger file in a directory mounted between the host and container. If the trigger file is present, the host will update its copy of Captain Hook, then restart the webhooks-subdomains docker pod. As per the blackbeard_scripts directory of dotfiles/debian , the captain_hook_canary.sh canary will restart the webhooks docker pod if it detects the file: /tmp/triggers/push-b-captain-hook-master (The canary script will clean up this file.) Now a hook can be added to Captain Hook that will be run when there is a push event on the master branch of bots/b-captain-hook . By creating a hook named push-b-captain-hook-master in the hooks/ directory of captain hook that runs a simple touch command, this webhook can trigger the script which triggers a restart of the docker pod. Code: https://git.charlesreid1.com/bots/b-captain-hook/src/branch/master/hooks/push-b-captain-hook-master","title":"Captain Hook's Canary"},{"location":"#network","text":"The d-subodomains-nginx container opens different ports for different subdomains, and reverse-proxies requests from charlesreid1.com. The port numbering starts at 7777 for pages.charlesreid1.com and goes up from there, one port per subdomain. Also see pod-charlesreid1 on git.charlesreid1.com for the nginx reverse proxy configuration. Captain Hook runs a Flask server on port 5000 and listens for triggers from git.charlesreid1.com (gitea) web hooks. These web hooks must have the correct secret or the trigger will be ignored.","title":"Network"},{"location":"#servers","text":"This pod runs on blackbeard. The nginx service is reverse-proxied HTTP with krash, and accessible at ports 7777+ and up. The Captain Hook webhook server is also reverse-proxied HTTP. The krash nginx server will handle all traffic to https://hooks.charlesreid1.com except URLs prefixed with webhook , which are forwarded on to Captain Hook on port 5000.","title":"Servers"},{"location":"Adding/","text":"Adding Hooks \u00b6 To add a hook to Captain Hook: Create an executable script in bots/b-captain-hook on git.charlesreid1.com with the name of the action, the name of the repo (not the owner), and the name of the branch in the filename. For example, push-my-dotfiles-master would be matched every time I push changes to the master branch of any repository named my-dotfiles . Add, commit, and push your hook to the master branch of Captain Hook Wait about 15 seconds for the canary script to run (it has to update the Captain Hook git repo running on the remote server to the latest version and restart the webhooks-subdomains docker pod.) Open the my-dotfiles repository on git.charlesreid1.com, go to the Settings > Webhooks page, and add a Gitea webhook. Enter info: a. Payload URL is the Captain Hook server, which is https://hooks.charlesreid1.com/webhook . b. Content type is application/json c. Secret is my little secret d. Pick what you'd like, I usually go with \"just the push event\" Save the webhook, then click on the webhook again to open it back up. Scroll down to the bottom right and click \"Test Delivery\". You should see a green success sign. If you see a red warning sign: ensure webhooks-subdomain pods are running ensure port 5000 open in captain hook container and on blackbeard and on aws ensure hook has been added to b-captain-hook repository's hooks folder","title":"Adding Webhooks"},{"location":"Adding/#adding-hooks","text":"To add a hook to Captain Hook: Create an executable script in bots/b-captain-hook on git.charlesreid1.com with the name of the action, the name of the repo (not the owner), and the name of the branch in the filename. For example, push-my-dotfiles-master would be matched every time I push changes to the master branch of any repository named my-dotfiles . Add, commit, and push your hook to the master branch of Captain Hook Wait about 15 seconds for the canary script to run (it has to update the Captain Hook git repo running on the remote server to the latest version and restart the webhooks-subdomains docker pod.) Open the my-dotfiles repository on git.charlesreid1.com, go to the Settings > Webhooks page, and add a Gitea webhook. Enter info: a. Payload URL is the Captain Hook server, which is https://hooks.charlesreid1.com/webhook . b. Content type is application/json c. Secret is my little secret d. Pick what you'd like, I usually go with \"just the push event\" Save the webhook, then click on the webhook again to open it back up. Scroll down to the bottom right and click \"Test Delivery\". You should see a green success sign. If you see a red warning sign: ensure webhooks-subdomain pods are running ensure port 5000 open in captain hook container and on blackbeard and on aws ensure hook has been added to b-captain-hook repository's hooks folder","title":"Adding Hooks"},{"location":"Canary/","text":"Captain Hook's Canary \u00b6 Captain Hook's Canary is a mechanism by which a docker pod running a webhook server can send a signal to the host to restart the docker pod. This is done by bind-mounting a host directory at /tmp/triggers/ inside the docker container, and when a webhook is received from git.charlesreid1.com that indicates there was a change to Captain Hook, the docker pod creates a trigger file. The canary bash script, meanwhile, is a bash script that runs forever and checks for a trigger file from the docker pod every 10 seconds. The pull host Captain Hook script is a script that updates the Captain Hook git repo on the host machine. On top of all of that, we also need a startup service that will actually run the captain hook canary script, and keep it running, and stop it when we ask it to stop. Sections below cover: The canary bash script The docker host pull script * The canary statup service The Canary Bash Script \u00b6 Note: this needs an associated systemd service. See the services directory of the dotfiles repo. This is a canary script for connecting the Captain Hook container to the host machine, and triggering tasks on the host machine with webhooks. The Captain Hook container mounts the following host directory inside the container (same location for host/container): /tmp/triggers/ When a webhook in Captain Hook wants to trigger an event on the host (blackbeard), it puts a file in /tmp/triggers/ . Meanwhile, on the host, this script checks every 10 seconds for trigger files. Each webhook can create its own trigger file, and this script processes each trigger differently. #!/bin/bash while true do # bootstrap-pull captain hook if [ -f \"/tmp/triggers/push-b-captain-hook-master\" ] ; then echo \"CAPTAIN HOOK'S CANARY:\" echo \"Running trigger to update Captain Hook on the host machine (user charles)\" sudo -H -u charles python /home/charles/blackbeard_scripts/captain_hook_pull_host.py echo \"All done.\" rm -f \"/tmp/triggers/push-b-captain-hook-master\" fi sleep 10 ; done The Pull Host Captain Hook Script \u00b6 Next we have a python script that actually updates the host's version of Captain Hook: #!/usr/bin/env python3 import subprocess import os import time \"\"\" Captain Hook: Pull Captain Hook on the Host This script is called by the host machine (blackbeard) running the Captain Hook container. This is triggered by push actions to the master branch of b-captain-hook. The action is to update (git pull) the copy of Captain Hook running on the host, and restart the container pod. \"\"\" work_dir = os . path . join ( '/home' , 'charles' , 'codes' , 'bots' , 'b-captain-hook' ) # Step 1: # Update Captain Hook pull_cmd = [ 'git' , 'pull' , 'origin' , 'master' ] subprocess . call ( pull_cmd , cwd = work_dir ) time . sleep ( 5 ) # Step 2: # Restart Captain Hook pod pod_restart = [ 'docker-compose' , 'restart' ] subprocess . call ( pod_restart , cwd = work_dir ) The Canary Startup Script \u00b6 Here is the startup file that runs the Captain Hook's Canary bash script. The stop directive uses pgrep to find the process id and stops any PIDs returned. [Unit] Description=captain hook canary script Requires=dockerpod-captainhook.service After=dockerpod-captainhook.service [Service] Restart=always ExecStart=/home/charles/blackbeard_scripts/captain_hook_canary.sh ExecStop=/usr/bin/pgrep -f captain_hook_canary | /usr/bin/xargs /bin/kill [Install] WantedBy=default.target See Services for more info on what to do with this file.","title":"Captain Hook's Canary"},{"location":"Canary/#captain-hooks-canary","text":"Captain Hook's Canary is a mechanism by which a docker pod running a webhook server can send a signal to the host to restart the docker pod. This is done by bind-mounting a host directory at /tmp/triggers/ inside the docker container, and when a webhook is received from git.charlesreid1.com that indicates there was a change to Captain Hook, the docker pod creates a trigger file. The canary bash script, meanwhile, is a bash script that runs forever and checks for a trigger file from the docker pod every 10 seconds. The pull host Captain Hook script is a script that updates the Captain Hook git repo on the host machine. On top of all of that, we also need a startup service that will actually run the captain hook canary script, and keep it running, and stop it when we ask it to stop. Sections below cover: The canary bash script The docker host pull script * The canary statup service","title":"Captain Hook's Canary"},{"location":"Canary/#the-canary-bash-script","text":"Note: this needs an associated systemd service. See the services directory of the dotfiles repo. This is a canary script for connecting the Captain Hook container to the host machine, and triggering tasks on the host machine with webhooks. The Captain Hook container mounts the following host directory inside the container (same location for host/container): /tmp/triggers/ When a webhook in Captain Hook wants to trigger an event on the host (blackbeard), it puts a file in /tmp/triggers/ . Meanwhile, on the host, this script checks every 10 seconds for trigger files. Each webhook can create its own trigger file, and this script processes each trigger differently. #!/bin/bash while true do # bootstrap-pull captain hook if [ -f \"/tmp/triggers/push-b-captain-hook-master\" ] ; then echo \"CAPTAIN HOOK'S CANARY:\" echo \"Running trigger to update Captain Hook on the host machine (user charles)\" sudo -H -u charles python /home/charles/blackbeard_scripts/captain_hook_pull_host.py echo \"All done.\" rm -f \"/tmp/triggers/push-b-captain-hook-master\" fi sleep 10 ; done","title":"The Canary Bash Script"},{"location":"Canary/#the-pull-host-captain-hook-script","text":"Next we have a python script that actually updates the host's version of Captain Hook: #!/usr/bin/env python3 import subprocess import os import time \"\"\" Captain Hook: Pull Captain Hook on the Host This script is called by the host machine (blackbeard) running the Captain Hook container. This is triggered by push actions to the master branch of b-captain-hook. The action is to update (git pull) the copy of Captain Hook running on the host, and restart the container pod. \"\"\" work_dir = os . path . join ( '/home' , 'charles' , 'codes' , 'bots' , 'b-captain-hook' ) # Step 1: # Update Captain Hook pull_cmd = [ 'git' , 'pull' , 'origin' , 'master' ] subprocess . call ( pull_cmd , cwd = work_dir ) time . sleep ( 5 ) # Step 2: # Restart Captain Hook pod pod_restart = [ 'docker-compose' , 'restart' ] subprocess . call ( pod_restart , cwd = work_dir )","title":"The Pull Host Captain Hook Script"},{"location":"Canary/#the-canary-startup-script","text":"Here is the startup file that runs the Captain Hook's Canary bash script. The stop directive uses pgrep to find the process id and stops any PIDs returned. [Unit] Description=captain hook canary script Requires=dockerpod-captainhook.service After=dockerpod-captainhook.service [Service] Restart=always ExecStart=/home/charles/blackbeard_scripts/captain_hook_canary.sh ExecStop=/usr/bin/pgrep -f captain_hook_canary | /usr/bin/xargs /bin/kill [Install] WantedBy=default.target See Services for more info on what to do with this file.","title":"The Canary Startup Script"},{"location":"Running/","text":"The Docker Compose File \u00b6 The docker-compose.yml file contains all the directives needed to run a docker pod for captain hook and the subdomains nginx server. Why use docker-compose instead of docker? docker-compose is the preferred way to run multiple containers. Running Webhooks-Subdomains Docker Pod from Command Line \u00b6 Run the pod in the foreground or background by running these commands from the directory containing docker-compose.yml : docker-compose up # interactive docker-compose up -d # detached If you want to rebuild all the containers before running up, docker-compose up --build If you just want to rebuild the containers, docker-compose build To rebuild absolutely everything from scratch, docker-compose build --no-cache WARNING: this will re-download all aptitude packages, which can be extremely slow. Use with caution.) You can restart all containers in a pod using the restart command: docker-compose restart WARNING: this will NOT pick up changes to Dockerfiles or to files that are mounted into the container. This simply restarts the container using the same image (in memory) that was previously running, without getting an up-to-date container image. Workflow for Docker Pod Updates \u00b6 To minimize downtime, use the following workflow: Run docker-compose build to rebuild the images, leaving the pod running (they are not affected) Run docker-compose down to bring the pod down Run docker-compose up to bring the pod up (Add the -d flag to start the docker pod in the background.)","title":"Running Captain Hook"},{"location":"Running/#the-docker-compose-file","text":"The docker-compose.yml file contains all the directives needed to run a docker pod for captain hook and the subdomains nginx server. Why use docker-compose instead of docker? docker-compose is the preferred way to run multiple containers.","title":"The Docker Compose File"},{"location":"Running/#running-webhooks-subdomains-docker-pod-from-command-line","text":"Run the pod in the foreground or background by running these commands from the directory containing docker-compose.yml : docker-compose up # interactive docker-compose up -d # detached If you want to rebuild all the containers before running up, docker-compose up --build If you just want to rebuild the containers, docker-compose build To rebuild absolutely everything from scratch, docker-compose build --no-cache WARNING: this will re-download all aptitude packages, which can be extremely slow. Use with caution.) You can restart all containers in a pod using the restart command: docker-compose restart WARNING: this will NOT pick up changes to Dockerfiles or to files that are mounted into the container. This simply restarts the container using the same image (in memory) that was previously running, without getting an up-to-date container image.","title":"Running Webhooks-Subdomains Docker Pod from Command Line"},{"location":"Running/#workflow-for-docker-pod-updates","text":"To minimize downtime, use the following workflow: Run docker-compose build to rebuild the images, leaving the pod running (they are not affected) Run docker-compose down to bring the pod down Run docker-compose up to bring the pod up (Add the -d flag to start the docker pod in the background.)","title":"Workflow for Docker Pod Updates"},{"location":"Services/","text":"Running Hooks-Subdomains Docker Pod as Startup Service \u00b6 The webhooks-subdomains docker pod requires two startup services - one keeps the docker pod running, the other watches a folder shared between the host and container for signals from the container, and uses that to trigger updates to the subdomains web content. Also see the services/ folder of the dotfiles/debian repository , repository for the systemd services. Service 1: Webhooks Docker Pod \u00b6 This service keeps the webhooks docker pod service running continuously. If the pod stops, this service will restart it. (This service should not be running if you are troubleshooting the docker pod.) dockerpod-webhooks.service: [Unit] Description=webhooks and subdomains docker pod Requires=docker.service After=docker.service [Service] Restart=always ExecStart=/usr/local/bin/docker-compose -f /home/charles/codes/docker/pod-webhooks/docker-compose.yml up ExecStop=/usr/local/bin/docker-compose -f /home/charles/codes/docker/pod-webhooks/docker-compose.yml down [Install] WantedBy=default.target captain-hook-canary.service: [Unit] Description=captain hook canary script Requires=dockerpod-captainhook.service After=dockerpod-captainhook.service [Service] Restart=always ExecStart=/home/charles/blackbeard_scripts/captain_hook_canary.sh ExecStop=/usr/bin/pgrep -f captain_hook_canary | /usr/bin/xargs /bin/kill [Install] WantedBy=default.target Now install the service to /etc/systemd/system/dockerpod-webhooks.servce , and/or /etc/systemd/system/captain-hook-canary.servce , and activate it: sudo systemctl enable dockerpod-webhooks.service sudo systemctl enable captain-hook-canary.service Now you can start/stop the service with: sudo systemctl (start|stop) dockerpod-webhooks.service sudo systemctl (start|stop) captain-hook-canary.service As mentioned above, these services should be stopped before doing a docker-compose stop or a docker-compose up --build to keep the pod from respawning in the middle of the task. Stop using: sudo systemctl stop dockerpod-webhooks.service sudo systemctl stop captain-hook-canary.service","title":"Captain Hook Startup Services"},{"location":"Services/#running-hooks-subdomains-docker-pod-as-startup-service","text":"The webhooks-subdomains docker pod requires two startup services - one keeps the docker pod running, the other watches a folder shared between the host and container for signals from the container, and uses that to trigger updates to the subdomains web content. Also see the services/ folder of the dotfiles/debian repository , repository for the systemd services.","title":"Running Hooks-Subdomains Docker Pod as Startup Service"},{"location":"Services/#service-1-webhooks-docker-pod","text":"This service keeps the webhooks docker pod service running continuously. If the pod stops, this service will restart it. (This service should not be running if you are troubleshooting the docker pod.) dockerpod-webhooks.service: [Unit] Description=webhooks and subdomains docker pod Requires=docker.service After=docker.service [Service] Restart=always ExecStart=/usr/local/bin/docker-compose -f /home/charles/codes/docker/pod-webhooks/docker-compose.yml up ExecStop=/usr/local/bin/docker-compose -f /home/charles/codes/docker/pod-webhooks/docker-compose.yml down [Install] WantedBy=default.target captain-hook-canary.service: [Unit] Description=captain hook canary script Requires=dockerpod-captainhook.service After=dockerpod-captainhook.service [Service] Restart=always ExecStart=/home/charles/blackbeard_scripts/captain_hook_canary.sh ExecStop=/usr/bin/pgrep -f captain_hook_canary | /usr/bin/xargs /bin/kill [Install] WantedBy=default.target Now install the service to /etc/systemd/system/dockerpod-webhooks.servce , and/or /etc/systemd/system/captain-hook-canary.servce , and activate it: sudo systemctl enable dockerpod-webhooks.service sudo systemctl enable captain-hook-canary.service Now you can start/stop the service with: sudo systemctl (start|stop) dockerpod-webhooks.service sudo systemctl (start|stop) captain-hook-canary.service As mentioned above, these services should be stopped before doing a docker-compose stop or a docker-compose up --build to keep the pod from respawning in the middle of the task. Stop using: sudo systemctl stop dockerpod-webhooks.service sudo systemctl stop captain-hook-canary.service","title":"Service 1: Webhooks Docker Pod"}]}