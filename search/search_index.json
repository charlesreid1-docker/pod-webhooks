{
    "docs": [
        {
            "location": "/",
            "text": "pod-webhooks\n\u00b6\n\n\nThis docker pod runs two services:\n\n\n\n\nCaptain Hook webhook server (python + flask)\n\n\nb-captain-hook\n\n\n\n\n\n\nStatic content server for subdomain pages (nginx)\n\n\nd-nginx-subdomains\n\n\n\n\n\n\n\n\nThese two services are in this repo as submodules.\n\n\nLinks\n\u00b6\n\n\nSee documentation page here: \nhttps://pages.charlesreid1.com/pod-webhooks\n\n\nSource code on git.charlesreid1.com: \nhttps://git.charlesreid1.com/docker/pod-webhooks\n\n\nSource code on github.com: \nhttps://github.com/charlesreid1-docker/pod-webhooks\n\n\nAdding Hooks\n\u00b6\n\n\nSince this is probably the only thing you'll care about once everything\nis actually running... until it breaks.\n\n\nHow To Add A Hook\n\n\nHow It Works\n\u00b6\n\n\nSee \nRunning.md\n for info about running this docker pod.\n\n\n\n\nRunning the Docker Pod from Comand Line\n\n\nWorkflow for Docker Pod Updates\n\n\n\n\nSee \nServices.md\n for info about running startup services.\n\n\n\n\nRunning the Docker Pod as a Startup Service\n\n\nRunning Captain Hook's Canary (Script)\n\n\n\n\nEnable/disable service (installs/uninstalls, but does not start):\n\n\nsudo systemctl (enable|disable) dockerpod-webhooks.service\nsudo systemctl (enable|disable) captain-hook-canary.service\n\n\n\n\n\nStart/stop:\n\n\nsudo systemctl (start|stop) dockerpod-webhooks.service\nsudo systemctl (start|stop) captain-hook-canary.service\n\n\n\n\n\nSee \nCaptain Hook's Canary (Canary.md)\n for details on the canary script that allows the\nwebhooks docker pod to trigger itself to be re-loaded when there are new hooks\nadded to captain hook.\n\n\nVolumes and Files\n\u00b6\n\n\nSubdomains\n\u00b6\n\n\nThe static files hosted on charlesreid1.com subdomains are contained in\nsubdirectories of \n/www/*.charlesreid1.com/\n and this is\nmounted by the subdomains docker container that has rules\nset up for which subdomains to serve.\n\n\nCaptain Hook\n\u00b6\n\n\nCaptain Hook mounts the \n/www\n folder, which is served by the subdomains\nnginx server, as well as the hooks folder in the Captain Hook repository\n(that's at \nb-captain-hook/hooks\n).\n\n\nWhen there is a change pushed to a particular branch on git.charlesreid1.com,\nthe git.charlesreid1.com server will check if there is a corresponding hook that's\nbeen added to Captain Hook for that repo and branch. If so, git.charlesreid1.com\nruns that script. For pages.charlesreid1.com, that's usually just a git pull \non the contents of \n/www/pages.charlesreid1.com/my-page\n.\n\n\nCaptain Hook's Canary\n\u00b6\n\n\nCaptain Hook presents a bit of a paradox: the webhook docker pod needs to be \nable to tell the host to restart the webhook docker pod when changes are pushed\nto Captain Hook itself.\n\n\nThis is done by Captain Hook's Canary. This is a script that checks every 10 seconds\nfor a trigger file in a directory mounted between the host and container. If the \ntrigger file is present, the host will update its copy of Captain Hook,\nthen restart the webhooks-subdomains docker pod.\n\n\nAs per the \nblackbeard_scripts\n\ndirectory of \ndotfiles/debian\n,\nthe \ncaptain_hook_canary.sh\n canary will restart the webhooks docker pod if it \ndetects the file:\n\n\n/tmp/triggers/push-b-captain-hook-master\n\n\n\n\n\n(The canary script will clean up this file.)\n\n\nNow a hook can be added to Captain Hook that will be run when there is a push event\non the master branch of \nbots/b-captain-hook\n.\nBy creating a hook named \npush-b-captain-hook-master\n in the\n\nhooks/\n directory of captain hook that runs a simple \ntouch\n command,\nthis webhook can trigger the script which triggers a restart of the\ndocker pod.\n\n\nCode: \nhttps://git.charlesreid1.com/bots/b-captain-hook/src/branch/master/hooks/push-b-captain-hook-master\n\n\nNetwork\n\u00b6\n\n\nThe \nd-subodomains-nginx\n container opens different ports for different\nsubdomains, and reverse-proxies requests from charlesreid1.com.\nThe port numbering starts at 7777 for pages.charlesreid1.com\nand goes up from there, one port per subdomain.\n\n\nAlso see \npod-charlesreid1\n\non git.charlesreid1.com for the nginx reverse proxy configuration.\n\n\nCaptain Hook runs a Flask server on port 5000 and listens for triggers\nfrom git.charlesreid1.com (gitea) web hooks. These web hooks must have \nthe correct secret or the trigger will be ignored.\n\n\nServers\n\u00b6\n\n\nThis pod runs on blackbeard.\n\n\nThe nginx service is reverse-proxied HTTP with krash,\nand accessible at ports 7777+ and up.\n\n\nThe Captain Hook webhook server is also reverse-proxied HTTP.\nThe krash nginx server will handle all traffic to \n\nhttps://hooks.charlesreid1.com\n except URLs prefixed\nwith \nwebhook\n, which are forwarded on to Captain Hook\non port 5000.",
            "title": "Home"
        },
        {
            "location": "/#pod-webhooks",
            "text": "This docker pod runs two services:   Captain Hook webhook server (python + flask)  b-captain-hook    Static content server for subdomain pages (nginx)  d-nginx-subdomains     These two services are in this repo as submodules.",
            "title": "pod-webhooks"
        },
        {
            "location": "/#links",
            "text": "See documentation page here:  https://pages.charlesreid1.com/pod-webhooks  Source code on git.charlesreid1.com:  https://git.charlesreid1.com/docker/pod-webhooks  Source code on github.com:  https://github.com/charlesreid1-docker/pod-webhooks",
            "title": "Links"
        },
        {
            "location": "/#adding-hooks",
            "text": "Since this is probably the only thing you'll care about once everything\nis actually running... until it breaks.  How To Add A Hook",
            "title": "Adding Hooks"
        },
        {
            "location": "/#how-it-works",
            "text": "See  Running.md  for info about running this docker pod.   Running the Docker Pod from Comand Line  Workflow for Docker Pod Updates   See  Services.md  for info about running startup services.   Running the Docker Pod as a Startup Service  Running Captain Hook's Canary (Script)   Enable/disable service (installs/uninstalls, but does not start):  sudo systemctl (enable|disable) dockerpod-webhooks.service\nsudo systemctl (enable|disable) captain-hook-canary.service  Start/stop:  sudo systemctl (start|stop) dockerpod-webhooks.service\nsudo systemctl (start|stop) captain-hook-canary.service  See  Captain Hook's Canary (Canary.md)  for details on the canary script that allows the\nwebhooks docker pod to trigger itself to be re-loaded when there are new hooks\nadded to captain hook.",
            "title": "How It Works"
        },
        {
            "location": "/#volumes-and-files",
            "text": "",
            "title": "Volumes and Files"
        },
        {
            "location": "/#subdomains",
            "text": "The static files hosted on charlesreid1.com subdomains are contained in\nsubdirectories of  /www/*.charlesreid1.com/  and this is\nmounted by the subdomains docker container that has rules\nset up for which subdomains to serve.",
            "title": "Subdomains"
        },
        {
            "location": "/#captain-hook",
            "text": "Captain Hook mounts the  /www  folder, which is served by the subdomains\nnginx server, as well as the hooks folder in the Captain Hook repository\n(that's at  b-captain-hook/hooks ).  When there is a change pushed to a particular branch on git.charlesreid1.com,\nthe git.charlesreid1.com server will check if there is a corresponding hook that's\nbeen added to Captain Hook for that repo and branch. If so, git.charlesreid1.com\nruns that script. For pages.charlesreid1.com, that's usually just a git pull \non the contents of  /www/pages.charlesreid1.com/my-page .",
            "title": "Captain Hook"
        },
        {
            "location": "/#captain-hooks-canary",
            "text": "Captain Hook presents a bit of a paradox: the webhook docker pod needs to be \nable to tell the host to restart the webhook docker pod when changes are pushed\nto Captain Hook itself.  This is done by Captain Hook's Canary. This is a script that checks every 10 seconds\nfor a trigger file in a directory mounted between the host and container. If the \ntrigger file is present, the host will update its copy of Captain Hook,\nthen restart the webhooks-subdomains docker pod.  As per the  blackbeard_scripts \ndirectory of  dotfiles/debian ,\nthe  captain_hook_canary.sh  canary will restart the webhooks docker pod if it \ndetects the file:  /tmp/triggers/push-b-captain-hook-master  (The canary script will clean up this file.)  Now a hook can be added to Captain Hook that will be run when there is a push event\non the master branch of  bots/b-captain-hook .\nBy creating a hook named  push-b-captain-hook-master  in the hooks/  directory of captain hook that runs a simple  touch  command,\nthis webhook can trigger the script which triggers a restart of the\ndocker pod.  Code:  https://git.charlesreid1.com/bots/b-captain-hook/src/branch/master/hooks/push-b-captain-hook-master",
            "title": "Captain Hook's Canary"
        },
        {
            "location": "/#network",
            "text": "The  d-subodomains-nginx  container opens different ports for different\nsubdomains, and reverse-proxies requests from charlesreid1.com.\nThe port numbering starts at 7777 for pages.charlesreid1.com\nand goes up from there, one port per subdomain.  Also see  pod-charlesreid1 \non git.charlesreid1.com for the nginx reverse proxy configuration.  Captain Hook runs a Flask server on port 5000 and listens for triggers\nfrom git.charlesreid1.com (gitea) web hooks. These web hooks must have \nthe correct secret or the trigger will be ignored.",
            "title": "Network"
        },
        {
            "location": "/#servers",
            "text": "This pod runs on blackbeard.  The nginx service is reverse-proxied HTTP with krash,\nand accessible at ports 7777+ and up.  The Captain Hook webhook server is also reverse-proxied HTTP.\nThe krash nginx server will handle all traffic to  https://hooks.charlesreid1.com  except URLs prefixed\nwith  webhook , which are forwarded on to Captain Hook\non port 5000.",
            "title": "Servers"
        },
        {
            "location": "/Adding/",
            "text": "Adding Hooks\n\u00b6\n\n\nTo add a hook to Captain Hook:\n\n\n\n\n\n\nCreate an executable script in \nbots/b-captain-hook\n\n   on git.charlesreid1.com with the name of the action, the name of the repo (not the owner),\n   and the name of the branch in the filename. For example, \npush-my-dotfiles-master\n would be \n   matched every time I \npush\n changes to the \nmaster\n branch  of any repository named \nmy-dotfiles\n.\n\n\n\n\n\n\nAdd, commit, and push your hook to the master branch of Captain Hook\n\n\n\n\n\n\nWait about 15 seconds for the canary script to run (it has to update\n   the Captain Hook git repo running on the remote server to the latest version\n   and restart the webhooks-subdomains docker pod.)\n\n\n\n\n\n\nOpen the \nmy-dotfiles\n repository on git.charlesreid1.com, go to the\n   Settings > Webhooks page, and add a Gitea webhook.\n\n\n\n\n\n\nEnter info:\n    a. Payload URL is the Captain Hook server, which is \nhttps://hooks.charlesreid1.com/webhook\n.\n    b. Content type is application/json\n    c. Secret is my little secret\n    d. Pick what you'd like, I usually go with \"just the push event\"\n\n\n\n\n\n\nSave the webhook, then click on the webhook again to open it back up.\n   Scroll down to the bottom right and click \"Test Delivery\". \n\n\n\n\n\n\nYou should see a green success sign. If you see a red warning sign:\n\n\n\n\nensure webhooks-subdomain pods are running\n\n\nensure port 5000 open in captain hook container and on blackbeard and on aws\n\n\nensure hook has been added to b-captain-hook repository's hooks folder",
            "title": "Adding Webhooks"
        },
        {
            "location": "/Adding/#adding-hooks",
            "text": "To add a hook to Captain Hook:    Create an executable script in  bots/b-captain-hook \n   on git.charlesreid1.com with the name of the action, the name of the repo (not the owner),\n   and the name of the branch in the filename. For example,  push-my-dotfiles-master  would be \n   matched every time I  push  changes to the  master  branch  of any repository named  my-dotfiles .    Add, commit, and push your hook to the master branch of Captain Hook    Wait about 15 seconds for the canary script to run (it has to update\n   the Captain Hook git repo running on the remote server to the latest version\n   and restart the webhooks-subdomains docker pod.)    Open the  my-dotfiles  repository on git.charlesreid1.com, go to the\n   Settings > Webhooks page, and add a Gitea webhook.    Enter info:\n    a. Payload URL is the Captain Hook server, which is  https://hooks.charlesreid1.com/webhook .\n    b. Content type is application/json\n    c. Secret is my little secret\n    d. Pick what you'd like, I usually go with \"just the push event\"    Save the webhook, then click on the webhook again to open it back up.\n   Scroll down to the bottom right and click \"Test Delivery\".     You should see a green success sign. If you see a red warning sign:   ensure webhooks-subdomain pods are running  ensure port 5000 open in captain hook container and on blackbeard and on aws  ensure hook has been added to b-captain-hook repository's hooks folder",
            "title": "Adding Hooks"
        },
        {
            "location": "/Running/",
            "text": "The Docker Compose File\n\u00b6\n\n\nThe \ndocker-compose.yml\n file contains all the directives needed\nto run a docker pod for captain hook and the subdomains nginx server.\n\n\nWhy use docker-compose instead of docker? \ndocker-compose is the preferred way to run multiple containers.\n\n\nRunning Webhooks-Subdomains Docker Pod from Command Line\n\u00b6\n\n\nRun the pod in the foreground or background by running these\ncommands from the directory containing \ndocker-compose.yml\n:\n\n\ndocker-compose up       # interactive\ndocker-compose up -d    # detached\n\n\n\n\n\nIf you want to rebuild all the containers before running up,\n\n\ndocker-compose up --build\n\n\n\n\n\nIf you just want to rebuild the containers,\n\n\ndocker-compose build\n\n\n\n\n\nTo rebuild absolutely everything from scratch,\n\n\ndocker-compose build --no-cache\n\n\n\n\n\nWARNING:\n this will re-download all aptitude packages,\nwhich can be extremely slow. Use with caution.)\n\n\nYou can restart all containers in a pod using the restart command:\n\n\ndocker-compose restart\n\n\n\n\n\nWARNING:\n this will \nNOT\n pick up changes to \nDockerfiles or to files that are mounted into the container.\nThis simply restarts the container using the same image \n(in memory) that was previously running, \nwithout\n\ngetting an up-to-date container image.\n\n\nWorkflow for Docker Pod Updates\n\u00b6\n\n\nTo minimize downtime, use the following workflow:\n\n\n\n\nRun \ndocker-compose build\n to rebuild the images, leaving the pod running (they are not affected)\n\n\nRun \ndocker-compose down\n to bring the pod down\n\n\nRun \ndocker-compose up\n to bring the pod up\n\n\n\n\n(Add the \n-d\n flag to start the docker pod in the background.)",
            "title": "Running Captain Hook"
        },
        {
            "location": "/Running/#the-docker-compose-file",
            "text": "The  docker-compose.yml  file contains all the directives needed\nto run a docker pod for captain hook and the subdomains nginx server.  Why use docker-compose instead of docker? \ndocker-compose is the preferred way to run multiple containers.",
            "title": "The Docker Compose File"
        },
        {
            "location": "/Running/#running-webhooks-subdomains-docker-pod-from-command-line",
            "text": "Run the pod in the foreground or background by running these\ncommands from the directory containing  docker-compose.yml :  docker-compose up       # interactive\ndocker-compose up -d    # detached  If you want to rebuild all the containers before running up,  docker-compose up --build  If you just want to rebuild the containers,  docker-compose build  To rebuild absolutely everything from scratch,  docker-compose build --no-cache  WARNING:  this will re-download all aptitude packages,\nwhich can be extremely slow. Use with caution.)  You can restart all containers in a pod using the restart command:  docker-compose restart  WARNING:  this will  NOT  pick up changes to \nDockerfiles or to files that are mounted into the container.\nThis simply restarts the container using the same image \n(in memory) that was previously running,  without \ngetting an up-to-date container image.",
            "title": "Running Webhooks-Subdomains Docker Pod from Command Line"
        },
        {
            "location": "/Running/#workflow-for-docker-pod-updates",
            "text": "To minimize downtime, use the following workflow:   Run  docker-compose build  to rebuild the images, leaving the pod running (they are not affected)  Run  docker-compose down  to bring the pod down  Run  docker-compose up  to bring the pod up   (Add the  -d  flag to start the docker pod in the background.)",
            "title": "Workflow for Docker Pod Updates"
        },
        {
            "location": "/Services/",
            "text": "Running Hooks-Subdomains Docker Pod as Startup Service\n\u00b6\n\n\nThe webhooks-subdomains docker pod requires two startup\nservices - one keeps the docker pod running, the other\nwatches a folder shared between the host and container\nfor signals from the container, and uses that to trigger\nupdates to the subdomains web content.\n\n\nAlso see the \nservices/\n folder of the\n\ndotfiles/debian repository\n,\nrepository for the systemd services.\n\n\nService 1: Webhooks Docker Pod\n\u00b6\n\n\nThis service keeps the webhooks docker pod service running\ncontinuously. If the pod stops, this service will restart it.\n\n\n(This service should not be running if you are troubleshooting\nthe docker pod.)\n\n\ndockerpod-webhooks.service:\n\n\n[Unit]\nDescription=webhooks and subdomains docker pod\nRequires=docker.service\nAfter=docker.service\n\n[Service]\nRestart=always\nExecStart=/usr/local/bin/docker-compose -f /home/charles/codes/docker/pod-webhooks/docker-compose.yml up\nExecStop=/usr/local/bin/docker-compose  -f /home/charles/codes/docker/pod-webhooks/docker-compose.yml down\n\n[Install]\nWantedBy=default.target\n\n\n\n\n\ncaptain-hook-canary.service:\n\n\n[Unit]\nDescription=captain hook canary script\nRequires=dockerpod-captainhook.service\nAfter=dockerpod-captainhook.service\n\n[Service]\nRestart=always\nExecStart=/home/charles/blackbeard_scripts/captain_hook_canary.sh\nExecStop=/usr/bin/pgrep -f captain_hook_canary | /usr/bin/xargs /bin/kill \n\n[Install]\nWantedBy=default.target\n\n\n\n\n\nNow install the service to \n/etc/systemd/system/dockerpod-webhooks.servce\n,\nand/or \n/etc/systemd/system/captain-hook-canary.servce\n,\nand activate it:\n\n\nsudo systemctl enable dockerpod-webhooks.service\n\nsudo systemctl enable captain-hook-canary.service\n\n\n\n\n\nNow you can start/stop the service with:\n\n\nsudo systemctl (start|stop) dockerpod-webhooks.service\n\nsudo systemctl (start|stop) captain-hook-canary.service\n\n\n\n\n\nAs mentioned above, these services should be stopped before\ndoing a \ndocker-compose stop\n or a \ndocker-compose up --build\n\nto keep the pod from respawning in the middle of the task.\n\n\nStop using:\n\n\nsudo systemctl stop dockerpod-webhooks.service\n\nsudo systemctl stop captain-hook-canary.service",
            "title": "Captain Hook Startup Services"
        },
        {
            "location": "/Services/#running-hooks-subdomains-docker-pod-as-startup-service",
            "text": "The webhooks-subdomains docker pod requires two startup\nservices - one keeps the docker pod running, the other\nwatches a folder shared between the host and container\nfor signals from the container, and uses that to trigger\nupdates to the subdomains web content.  Also see the  services/  folder of the dotfiles/debian repository ,\nrepository for the systemd services.",
            "title": "Running Hooks-Subdomains Docker Pod as Startup Service"
        },
        {
            "location": "/Services/#service-1-webhooks-docker-pod",
            "text": "This service keeps the webhooks docker pod service running\ncontinuously. If the pod stops, this service will restart it.  (This service should not be running if you are troubleshooting\nthe docker pod.)  dockerpod-webhooks.service:  [Unit]\nDescription=webhooks and subdomains docker pod\nRequires=docker.service\nAfter=docker.service\n\n[Service]\nRestart=always\nExecStart=/usr/local/bin/docker-compose -f /home/charles/codes/docker/pod-webhooks/docker-compose.yml up\nExecStop=/usr/local/bin/docker-compose  -f /home/charles/codes/docker/pod-webhooks/docker-compose.yml down\n\n[Install]\nWantedBy=default.target  captain-hook-canary.service:  [Unit]\nDescription=captain hook canary script\nRequires=dockerpod-captainhook.service\nAfter=dockerpod-captainhook.service\n\n[Service]\nRestart=always\nExecStart=/home/charles/blackbeard_scripts/captain_hook_canary.sh\nExecStop=/usr/bin/pgrep -f captain_hook_canary | /usr/bin/xargs /bin/kill \n\n[Install]\nWantedBy=default.target  Now install the service to  /etc/systemd/system/dockerpod-webhooks.servce ,\nand/or  /etc/systemd/system/captain-hook-canary.servce ,\nand activate it:  sudo systemctl enable dockerpod-webhooks.service\n\nsudo systemctl enable captain-hook-canary.service  Now you can start/stop the service with:  sudo systemctl (start|stop) dockerpod-webhooks.service\n\nsudo systemctl (start|stop) captain-hook-canary.service  As mentioned above, these services should be stopped before\ndoing a  docker-compose stop  or a  docker-compose up --build \nto keep the pod from respawning in the middle of the task.  Stop using:  sudo systemctl stop dockerpod-webhooks.service\n\nsudo systemctl stop captain-hook-canary.service",
            "title": "Service 1: Webhooks Docker Pod"
        },
        {
            "location": "/Canary/",
            "text": "Captain Hook's Canary\n\u00b6\n\n\nCaptain Hook's Canary is a mechanism by which a docker pod\nrunning a webhook server can send a signal to the host to \nrestart the docker pod.\n\n\nThis is done by bind-mounting a host directory at \n/tmp/triggers/\n\ninside the docker container, and when a webhook is received \nfrom git.charlesreid1.com that indicates there was a change\nto Captain Hook, the docker pod creates a trigger file.\n\n\nThe canary bash script, meanwhile, is a bash script that runs \nforever and checks for a trigger file from the docker pod\nevery 10 seconds.\n\n\nThe pull host Captain Hook script is a script that updates the\nCaptain Hook git repo on the host machine.\n\n\nOn top of all of that, we also need a startup service that will\nactually run the captain hook canary script, and keep it running,\nand stop it when we ask it to stop.\n\n\nSections below cover:\n\n The canary bash script\n\n The docker host pull script\n* The canary statup service\n\n\nThe Canary Bash Script\n\u00b6\n\n\nNote: this needs an associated systemd service.\nSee the services directory of the dotfiles repo.\n\n\nThis is a canary script for connecting\nthe Captain Hook container to the host \nmachine, and triggering tasks on the \nhost machine with webhooks.\n\n\nThe Captain Hook container mounts the \nfollowing host directory inside the \ncontainer (same location for host/container):\n\n\n/tmp/triggers/\n\n\n\n\n\nWhen a webhook in Captain Hook wants to \ntrigger an event on the host (blackbeard),\nit puts a file in \n/tmp/triggers/\n.\n\n\nMeanwhile, on the host, this script checks\nevery 10 seconds for trigger files.\n\n\nEach webhook can create its own trigger file,\nand this script processes each trigger differently.\n\n\n#!/bin/bash\n\n\n\nwhile\n \ntrue\n\n\ndo\n\n    \n# bootstrap-pull captain hook\n\n    \nif\n \n[\n -f \n\"/tmp/triggers/push-b-captain-hook-master\"\n \n]\n;\n \nthen\n\n        \necho\n \n\"CAPTAIN HOOK'S CANARY:\"\n\n        \necho\n \n\"Running trigger to update Captain Hook on the host machine (user charles)\"\n\n        sudo -H -u charles python /home/charles/blackbeard_scripts/captain_hook_pull_host.py\n        \necho\n \n\"All done.\"\n\n        rm -f \n\"/tmp/triggers/push-b-captain-hook-master\"\n\n    \nfi\n\n\n    sleep \n10\n;\n\n\ndone\n\n\n\n\n\n\nThe Pull Host Captain Hook Script\n\u00b6\n\n\nNext we have a python script that actually updates the host's \nversion of Captain Hook:\n\n\n#!/usr/bin/env python3\n\n\nimport\n \nsubprocess\n\n\nimport\n \nos\n\n\nimport\n \ntime\n\n\n\n\"\"\"\n\n\nCaptain Hook: Pull Captain Hook on the Host \n\n\n\nThis script is called by the host machine \n\n\n(blackbeard) running the Captain Hook container.\n\n\n\nThis is triggered by push actions to the \n\n\nmaster branch of b-captain-hook.\n\n\n\nThe action is to update (git pull) the copy \n\n\nof Captain Hook running on the host, and\n\n\nrestart the container pod.\n\n\n\"\"\"\n\n\n\nwork_dir\n \n=\n \nos\n.\npath\n.\njoin\n(\n'/home'\n,\n'charles'\n,\n'codes'\n,\n'bots'\n,\n'b-captain-hook'\n)\n\n\n\n# Step 1:\n\n\n# Update Captain Hook\n\n\npull_cmd\n \n=\n \n[\n'git'\n,\n'pull'\n,\n'origin'\n,\n'master'\n]\n\n\nsubprocess\n.\ncall\n(\npull_cmd\n,\n \ncwd\n=\nwork_dir\n)\n\n\n\ntime\n.\nsleep\n(\n5\n)\n\n\n\n# Step 2:\n\n\n# Restart Captain Hook pod\n\n\npod_restart\n \n=\n \n[\n'docker-compose'\n,\n'restart'\n]\n\n\nsubprocess\n.\ncall\n(\npod_restart\n,\n \ncwd\n=\nwork_dir\n)\n\n\n\n\n\n\nThe Canary Startup Script\n\u00b6\n\n\nHere is the startup file that runs the Captain Hook's Canary bash script.\n\n\nThe stop directive uses pgrep to find the process id and stops any PIDs returned.\n\n\n[Unit]\nDescription=captain hook canary script\nRequires=dockerpod-captainhook.service\nAfter=dockerpod-captainhook.service\n\n[Service]\nRestart=always\nExecStart=/home/charles/blackbeard_scripts/captain_hook_canary.sh\nExecStop=/usr/bin/pgrep -f captain_hook_canary | /usr/bin/xargs /bin/kill \n\n[Install]\nWantedBy=default.target\n\n\n\n\n\nSee \nServices\n for more info on what to do with this file.",
            "title": "Captain Hook's Canary"
        },
        {
            "location": "/Canary/#captain-hooks-canary",
            "text": "Captain Hook's Canary is a mechanism by which a docker pod\nrunning a webhook server can send a signal to the host to \nrestart the docker pod.  This is done by bind-mounting a host directory at  /tmp/triggers/ \ninside the docker container, and when a webhook is received \nfrom git.charlesreid1.com that indicates there was a change\nto Captain Hook, the docker pod creates a trigger file.  The canary bash script, meanwhile, is a bash script that runs \nforever and checks for a trigger file from the docker pod\nevery 10 seconds.  The pull host Captain Hook script is a script that updates the\nCaptain Hook git repo on the host machine.  On top of all of that, we also need a startup service that will\nactually run the captain hook canary script, and keep it running,\nand stop it when we ask it to stop.  Sections below cover:  The canary bash script  The docker host pull script\n* The canary statup service",
            "title": "Captain Hook's Canary"
        },
        {
            "location": "/Canary/#the-canary-bash-script",
            "text": "Note: this needs an associated systemd service.\nSee the services directory of the dotfiles repo.  This is a canary script for connecting\nthe Captain Hook container to the host \nmachine, and triggering tasks on the \nhost machine with webhooks.  The Captain Hook container mounts the \nfollowing host directory inside the \ncontainer (same location for host/container):  /tmp/triggers/  When a webhook in Captain Hook wants to \ntrigger an event on the host (blackbeard),\nit puts a file in  /tmp/triggers/ .  Meanwhile, on the host, this script checks\nevery 10 seconds for trigger files.  Each webhook can create its own trigger file,\nand this script processes each trigger differently.  #!/bin/bash  while   true  do \n     # bootstrap-pull captain hook \n     if   [  -f  \"/tmp/triggers/push-b-captain-hook-master\"   ] ;   then \n         echo   \"CAPTAIN HOOK'S CANARY:\" \n         echo   \"Running trigger to update Captain Hook on the host machine (user charles)\" \n        sudo -H -u charles python /home/charles/blackbeard_scripts/captain_hook_pull_host.py\n         echo   \"All done.\" \n        rm -f  \"/tmp/triggers/push-b-captain-hook-master\" \n     fi \n\n    sleep  10 ;  done",
            "title": "The Canary Bash Script"
        },
        {
            "location": "/Canary/#the-pull-host-captain-hook-script",
            "text": "Next we have a python script that actually updates the host's \nversion of Captain Hook:  #!/usr/bin/env python3  import   subprocess  import   os  import   time  \"\"\"  Captain Hook: Pull Captain Hook on the Host   This script is called by the host machine   (blackbeard) running the Captain Hook container.  This is triggered by push actions to the   master branch of b-captain-hook.  The action is to update (git pull) the copy   of Captain Hook running on the host, and  restart the container pod.  \"\"\"  work_dir   =   os . path . join ( '/home' , 'charles' , 'codes' , 'bots' , 'b-captain-hook' )  # Step 1:  # Update Captain Hook  pull_cmd   =   [ 'git' , 'pull' , 'origin' , 'master' ]  subprocess . call ( pull_cmd ,   cwd = work_dir )  time . sleep ( 5 )  # Step 2:  # Restart Captain Hook pod  pod_restart   =   [ 'docker-compose' , 'restart' ]  subprocess . call ( pod_restart ,   cwd = work_dir )",
            "title": "The Pull Host Captain Hook Script"
        },
        {
            "location": "/Canary/#the-canary-startup-script",
            "text": "Here is the startup file that runs the Captain Hook's Canary bash script.  The stop directive uses pgrep to find the process id and stops any PIDs returned.  [Unit]\nDescription=captain hook canary script\nRequires=dockerpod-captainhook.service\nAfter=dockerpod-captainhook.service\n\n[Service]\nRestart=always\nExecStart=/home/charles/blackbeard_scripts/captain_hook_canary.sh\nExecStop=/usr/bin/pgrep -f captain_hook_canary | /usr/bin/xargs /bin/kill \n\n[Install]\nWantedBy=default.target  See  Services  for more info on what to do with this file.",
            "title": "The Canary Startup Script"
        }
    ]
}